https://github.com/PriyankaNigade18/DevLabMay24

Assignments
===================
1.Class and Object
 create Employee class with
 empid and empname and show()
 print 5 employee records!
 
 
 ========================================================
 Variable is name of storage which can store certain data
 
 1.Local Variable
 =====================
 Any variable declared inside a method/block called local variable
 
 scope: within a method
 Memory initialized: At the time method execution memory allocates
 Memory deallocation: After method execution
 
 2.Instance variable
 ==========================
 Any variable declared inside a class and outside any block/method/constructor
 without static keyword then it is instance
 
 Scope: Within a Object
Memory initialized: At the time of Object creation memory allocates
 Memory deallocation: Once Object destroy memory deallocate
 
 Note:
 ==========
 For every new object instance variable get the new memory!
 
 
 In java static keyword plays very important role
 Proper memory management we use static
 
 3.Static variable/class level variable
 ==========================
 Any variable declared inside a class and outside any block/method/constructor
 with static keyword then it is static variable
 
 Scope: Within a class
Memory initialized: At the time of class loading
 Memory deallocation: after class unload
 
 Note:
 ==========
Static variable creates memory one time and share with all the object

 
 =================================================
 Method
 =============
 group of statements we write to perform certain functionality
 
 Types of methods
======================
1.Instance method
======================
Any method declared without static keyword that is called instance

scope is within object
Instance method and variable we can call by Object only

2.static method
=======================
Any method declared with static keyword is called static method
scope within a class

Static method we can call in same class without object/class name
Static method we can call in different class with class name

In Automation to create reusable script we use static method!

==============================================
	Datatypes
	===============
	
Type Casting
=================
Conversion of one type of data into another type
type should be compatible


1.Primitive to Primitive
==========================
	1.Implicit type casting
	------------------------
	Automatic casting handle by JVM
	small size ---->large size
	byte-->short-->int-->long--->float--->double
	char-->int-->long--->float--->double
	
	2.Explicit types casting
	----------------------------
	Manual Conversion
	We use to convert large size data into small size 
	here we use casting operator (type)
	
	double--->float-->long--->int-->char-->short-->byte
	
	Wrapper Class
	=====================
	To store primitive data as Object
	
	int ------>Integer
	byte------>Byte
	float----->Float
	char---->Character
	boolean----->Boolean
	long-------->Long
	short---->Short
	
	
	
	
	
2.Object to Primitive(Wrapper class)

========================
 Unboxing in java
 Integer i=90;//object
 
 object into primitive
 int num=i.intValue();
 





3.Primitive to Object(Wrapper class)
========================		




===================================
Constructor
==================
Used to initialized object
1.Default constructor(JVM)
2.Parameterized constructor

constructor called at the time object creation
Constructor name should be same as its class name

Constructor Overloading is possible but overriding is not possible


This Keyword
===============
In Java, this is a reference variable that refers to the current object.
-this can be used to refer current class instance variable.
-this can be used to invoke current class method (implicitly)
-this() can be used to invoke current class constructor.








===============================
Array
=========
Collection of similar data types which is static in nature
Array size always fixed!

Array is static data structure

In java Array implemented as Object

=================================
String is class in java - java.lang
String is immutable class(by default it is final)

String is collection of  characters

Ways
=========
1.using new keyword
2.using literal

=======================
16-06-2024
=============
Super Keyword
============================
1.Super keyword can be used to refer immediate parent class instance variable.
2.Super keyword can be used to invoke immediate parent class method.
3.Super keyword can be used to call immediate parent class constructor.(super())

final Keyword
======================================
final keyword can be apply for variable,method and class
1.If we apply final keyword to variable then that variable will be consider constant variable
(value will become fix...no one can update)
2.If we apply final keyword to method then we cant override that method in other class or child class
3.If we apply final keyword to class then we can not extend that class into another class.

===============================================================
IQ: How we can implement immutable class ,variable or method in java?
Ans: Using final keyword.
==============================================================
Data Abstraction
================
It is process of hiding implementation details of software from end user and provide relevant information to the user.

Abstraction achive using
------------------------------
1.Abstarct class
2.Interface

1.Abstarct class
===============
1.In abstract class we can have both abstract method and non abstarct (concreate) Methods.
2.Abstract method and class we can declare using abstract keyword.
3.Abstract class can not be instantiated.
4.Abstract methods must be overriden by class which inherits abstract class.
5.Using Abstract class partial abstraction is possible.

Interface
===========
1.An interface in java is a blueprint of a class. 
2.Interface contains final and static variables.
3.Interface contains abstract methods.
4.An abstract method is a method contains definition but not body.
5.Methods in interface are public by default.
6.Interface supports the functionality of multiple inheritance.
7.We can define interface with interface keyword.
8.A class extends another class, an interface extends another interface
 but a class implements an interface.
9.We can create Object reference for Interface but we cannot instantiate interface.
10.Inheritance use extends keyword and Interface use implements keyword.


























 
 
 
 
 
 
 
 
 
 
 
 
 
 
 